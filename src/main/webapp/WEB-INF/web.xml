<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
  <!--中央调度器-->
  <servlet>
    <servlet-name>myweb</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--自定义springmvc读取配置文件的位置
   -->
    <init-param>
      <!--指定springmvc配置文件的位置属性-->
      <param-name>contextConfigLocation</param-name>
      <!--指定自定义文件的位置-->
      <param-value>classpath:conf/dispatcherServlet.xml</param-value>
    </init-param>
    <!--tomcat启动后能创建servlet对象
        load-on-startup:表示tomcat启动后创建对象的顺序，它的值是整数，数值越小，
        tomcat创建对象的时间越早，大于等于零的整数。
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>myweb</servlet-name>
    <!--
        使用框架的时候，url-pattern可以使用两种值
        1 使用扩展名方式，语法 *.xxx, xxxx是自定义扩展名 常用方式*.do，*.action, *.mvc等
        http://localhost:8080/myweb/some.do
        http://localhost:8080/myweb/other.do
        2 使用斜杠“/”
    -->
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>

  <!--注册监听器ContextLoaderListener
   监听器创建对象后会读取/WEB-INF/applicationContext.xml,
   在监听器里要创建ApplicationContext对象，需要加载配置文件，
   /WEB-INF/applicationContext.xml就是监听器默认读取的spring配置文件的路径

   可以修改默认文件位置，使用context-param重新指定文件的位置

   配置监听器：目的是创建容器对象，创建了容器对象，就能把spring.xml配置文件中的所有对象
   都创建好，用户发起发起请求就可以直接使用对象了
   -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:conf/applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--注册声明字符集过滤器-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--设置项目中使用的字符编码-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <!--强制请求对象（HttpServletRequsest）使用encoding编码方式-->
    <init-param>
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <!--设置应答对象（HttpServletResponse）使用encoding编码方式-->
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <!--/*是表示强制所有请求先通过过滤器-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!--自定义过滤.jsp文件-->
  <filter>
    <filter-name>loginfilter</filter-name>
    <filter-class>com.bj.crm.web.filter.loginfilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>loginfilter</filter-name>
    <url-pattern>*.jsp</url-pattern>
  </filter-mapping>
  <!--自定义监听器-->
  <listener>
    <listener-class>com.bj.crm.web.listener.SysInitListener</listener-class>
  </listener>
</web-app>